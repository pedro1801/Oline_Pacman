def ajustar_tupla(tupla):
    return tuple(5 * round(val / 5) for val in tupla)

def processar_retas(retas):
    retas_ajustadas = []
    for reta in retas:
        tupla1, tupla2 = reta
        
        # Calcular a variação em cada eixo
        variacao_x1 = abs(tupla1[0] - tupla2[0])
        variacao_y1 = abs(tupla1[1] - tupla2[1])
        
        if variacao_x1 > variacao_y1:
            tupla1 = ajustar_tupla(tupla1)
            tupla2 = ajustar_tupla(tupla2)
            valor_final = ((tupla1[0],tupla1[1]),(tupla2[0],tupla1[1]))
        else:
            tupla1 = ajustar_tupla(tupla1)
            tupla2 = ajustar_tupla(tupla2)
            valor_final = ((tupla1[0],tupla1[1]),(tupla1[0],tupla2[1]))        
        retas_ajustadas.append(valor_final)

    return retas_ajustadas

# Exemplo de uso
retas = [((30, 25), (146, 26)), ((146, 26), (31, 25)), ((30, 26), (30, 105)), ((30, 105), (30, 25)), ((31, 105), (144, 105)), ((145, 105), (30, 104)), ((144, 105), (145, 24)), ((144, 24), (146, 104)), ((30, 105), (30, 175)), ((30, 175), (31, 103)), ((30, 174), (144, 174)), ((144, 174), (30, 176)), ((144, 175), (145, 106)), ((145, 106), (146, 174)), ((146, 105), (210, 106)), ((210, 106), (145, 104)), ((146, 25), (291, 27)), ((289, 26), (145, 25)), ((289, 
24), (290, 103)), ((290, 103), (289, 26)), ((290, 104), (210, 106)), ((212, 106), (289, 102)), ((291, 105), (350, 105)), ((349, 105), (290, 105)), ((351, 105), (350, 25)), ((350, 24), (351, 104)), ((351, 104), (489, 105)), ((489, 105), (351, 105)), ((349, 24), (490, 26)), ((490, 26), (350, 26)), ((489, 26), (605, 25)), ((606, 25), (491, 25)), ((491, 25), (490, 106)), ((490, 105), (490, 25)), ((605, 25), (605, 106)), ((606, 106), (605, 25)), ((604, 103), (492, 105)), ((492, 105), (605, 105)), ((491, 106), (491, 174)), ((491, 174), (490, 106)), ((491, 174), (605, 174)), ((605, 174), (490, 174)), ((605, 175), (605, 106)), ((605, 106), (605, 174)), ((209, 106), (211, 179)), ((211, 179), (209, 105)), ((210, 180), (290, 180)), ((290, 180), (210, 179)), ((290, 180), (291, 230)), ((290, 230), (289, 181)), ((290, 229), (320, 230)), ((320, 230), (290, 229)), ((350, 229), (320, 230)), ((320, 230), 
(349, 229)), ((350, 229), (352, 179)), ((350, 179), (349, 230)), ((352, 181), (429, 180)), ((429, 180), (353, 180)), ((430, 180), (430, 107)), ((430, 107), (429, 181)), ((320, 231), (319, 295)), ((321, 295), (336, 296)), ((335, 296), (365, 296)), ((320, 293), (304, 295)), ((319, 294), (275, 295)), ((349, 229), (430, 230)), ((430, 230), (351, 230)), ((431, 231), (431, 294)), ((431, 294), (431, 230)), ((431, 295), (490, 294)), ((490, 294), (432, 294)), ((430, 295), (430, 361)), ((430, 361), (431, 295)), ((490, 176), (490, 295)), ((490, 295), (491, 175)), ((490, 297), (491, 420)), ((491, 420), (490, 296)), ((430, 359), (431, 420)), ((431, 420), (430, 360)), ((430, 358), (212, 361)), ((211, 359), (429, 361)), ((211, 360), (210, 231)), ((210, 231), (211, 361)), ((210, 230), (290, 229)), ((290, 229), (209, 230)), ((211, 361), (210, 420)), ((211, 420), (209, 361)), ((210, 419), (295, 421)), ((296, 421), (210, 419)), ((296, 421), (295, 484)), ((295, 484), (295, 420)), ((209, 419), (145, 420)), ((145, 420), (210, 418)), ((145, 419), (146, 485)), ((146, 485), (145, 419)), ((145, 484), (294, 483)), ((294, 483), (147, 483)), ((295, 482), (346, 484)), ((346, 484), (294, 483)), ((344, 484), (345, 421)), ((345, 421), (346, 481)), ((345, 422), (428, 417)), ((428, 417), (346, 419)), ((347, 484), (429, 485)), ((429, 485), (346, 483)), ((429, 485), (430, 550)), ((429, 550), (430, 487)), ((431, 486), (489, 485)), ((489, 485), (429, 485)), ((430, 418), (490, 420)), ((490, 420), (431, 417)), ((146, 296), (210, 296)), ((210, 296), (146, 295)), ((146, 175), (145, 294)), ((145, 294), (145, 176)), ((145, 296), (145, 419)), ((146, 419), (145, 296)), ((144, 420), (30, 421)), ((30, 421), (144, 422)), ((31, 421), (30, 480)), ((30, 480), (30, 421)), ((29, 478), (89, 481)), ((89, 481), (31, 480)), ((89, 480), (90, 545)), ((90, 545), (90, 480)), ((91, 543), (40, 545)), ((40, 545), (90, 546)), ((39, 543), (40, 614)), ((40, 614), (40, 548)), ((40, 614), (280, 615)), ((280, 614), (41, 615)), ((280, 614), (280, 551)), ((280, 551), (281, 615)), ((280, 550), (210, 549)), ((210, 549), (281, 550)), ((210, 550), (209, 484)), ((209, 484), (210, 549)), ((147, 484), (147, 545)), ((147, 544), (145, 488)), ((145, 544), (89, 545)), ((92, 545), (145, 545)), ((361, 551), (360, 614)), ((360, 614), (360, 550)), ((361, 551), (428, 548)), ((428, 548), (361, 549)), ((282, 614), (362, 613)), ((361, 613), (282, 615)), ((361, 614), (594, 613)), ((594, 613), (361, 613)), ((595, 614), (594, 546)), ((594, 546), (595, 615)), ((595, 546), (490, 544)), ((490, 544), (595, 546)), ((551, 543), (551, 486)), ((551, 486), (551, 544)), ((550, 485), (603, 485)), ((604, 484), (550, 485)), ((605, 486), (606, 420)), ((605, 421), (605, 484)), ((606, 420), (490, 420)), ((490, 420), (606, 422)), ((489, 420), (491, 545)), ((490, 545), (489, 421))]
retas_ajustadas = processar_retas(retas)
for i in range(0, len(retas_ajustadas), 3):
    item = retas_ajustadas[i:i+3]
    if len(item) > 2:
        print(item[0], ',', item[1], ',', item[2], ',')
    elif len(item) > 1:
        print(item[0], ',', item[1], ',')
    else:
        print(item[0], ',')

